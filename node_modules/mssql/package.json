{
  "author": {
    "name": "Patrik Simek",
    "url": "http://patriksimek.cz"
  },
  "name": "mssql",
  "description": "An easy-to-use MSSQL database connector for NodeJS.",
  "keywords": [
    "database",
    "mssql",
    "sql",
    "msnodesql",
    "sqlserver"
  ],
  "version": "0.3.1",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/patriksimek/node-mssql"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "tedious": ">=0.1.5",
    "tedious-connection-pool": ">=0.1.1"
  },
  "devDependencies": {
    "coffee-script": ">=1.6.2",
    "mocha": ">=1.12.0"
  },
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "test": "mocha --compilers coffee:coffee-script --reporter spec"
  },
  "readme": "# node-mssql [![Dependency Status](https://david-dm.org/patriksimek/node-mssql.png)](https://david-dm.org/patriksimek/node-mssql)\n\nAn easy-to-use MSSQL database connector for NodeJS.\n\nThere are some TDS modules which offer functionality to communicate with MSSQL databases but none of them does offer enough comfort - implementation takes a lot of lines of code. So I decided to create this module, that make work as easy as it could without loosing any important functionality.\n\nAt the moment it support two TDS modules:\n* [Tedious](https://github.com/pekim/tedious) by Mike D Pilsbury (pure javascript - windows/osx/linux)\n* [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver) by Microsoft Corporation (native - windows only)\n\n## Installation\n\n    npm install mssql\n\n## Quick Example\n\n```javascript\nvar sql = require('mssql'); \n\nconfig = {\n\tuser: '...',\n\tpassword: '...',\n\tserver: 'localhost',\n\tdatabase: '...'\n}\n\nsql.connect(config, function(err) {\n\t\n\t// Query\n\t\n\tvar request = new sql.Request();\n\trequest.query('select 1 as number', function(err, recordset) {\n\t\tconsole.dir(recordset);\n\t});\n\t\n\t// Stored Procedure\n\t\n\tvar request = new sql.Request();\n\trequest.input('input_parameter', sql.Int, value);\n\trequest.output('output_parameter', sql.Int);\n\trequest.execute('procedure_name', function(err, recordsets, returnValue) {\n\t\tconsole.dir(recordsets);\n\t});\n\t\n});\n```\n\n## Documentation\n\n### Configuration\n\n* [Basic](#cfg-basic)\n* [Tedious](#cfg-tedious)\n* [Microsoft Driver for Node.js for SQL Server](#cfg-msnodesql)\n\n### Request\n\n* [execute](#execute)\n* [input](#input)\n* [output](#output)\n* [query](#query)\n\n### Other\n\n* [Metadata](#meta)\n* [Data Types](#data-types)\n* [Verbose Mode](#verbose)\n\n## Configuration\n\n```javascript\nconfig = { ... }\n```\n\n<a name=\"cfg-basic\" />\n### Basic configuration is same for all drivers.\n\n* **driver** - Driver to use (default: `tedious`). Possible values: `tedious` or `msnodesql`.\n* **user** - User name to use for authentication.\n* **password** - Password to use for authentication.\n* **server** - Hostname to connect to.\n* **port** - Port to connect to (default: `1433`).\n* **database** - Database to connect to (default: dependent on server configuration).\n\n<a name=\"cfg-tedious\" />\n### Tedious\n\n* **options** - Tedious specific options. More information: http://pekim.github.io/tedious/api-connection.html\n* **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\n* **pool.min** - The minimun of connections there can be in the pool (default: `0`).\n* **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\n\n__Example__\n\n```javascript\nconfig = {\n\toptions: {\n\t\t// tedious options\n\t},\n\t\n\tpool: {\n\t\tmax: 10,\n\t    min: 0,\n\t    idleTimeoutMillis: 30000\n\t}\n}\n```\n\n<a name=\"cfg-msnodesql\" />\n### Microsoft Driver for Node.js for SQL Server\n\n* **connectionString** - Connection string (default: `Driver={SQL Server Native Client 11.0};Server=#{server},#{port};Database=#{database};Uid=#{user};Pwd=#{password};`).\n\n## Request\n\n```javascript\nvar request = new sql.Request();\n```\n\n<a name=\"execute\" />\n### execute(procedure, [callback])\n\nCall a stored procedure.\n\n__Arguments__\n\n* **procedure** - Name of the stored procedure to be executed.\n* **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred.\n\n__Example__\n\n```javascript\nvar request = new sql.Request();\nrequest.input('input_parameter', sql.Int, value);\nrequest.output('output_parameter', sql.Int);\nrequest.execute('procedure_name', function(err, recordsets, returnValue) {\n\tconsole.log(recordsets.length); // count of recordsets returned by procedure\n\tconsole.log(recordset[0].length); // count of rows contained in first recordset\n\tconsole.log(returnValue); // procedure return value\n\t\n\tconsole.log(request.parameters.output_parameter.value); // output value\n\t\n\t// ...\n});\n```\n\n---------------------------------------\n\n<a name=\"input\" />\n### input(name, [type], value)\n\nAdd an input parameter to the request.\n\n__Arguments__\n\n* **name** - Name of the input parameter without @ char.\n* **type** - SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n* **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\n\n__Example__\n\n```javascript\nrequest.input('input_parameter', value);\nrequest.input('input_parameter', sql.Int, value);\n```\n\n__JS Data Type To SQL Data Type Map__\n\n* `String` -> `sql.VarChar`\n* `Number` -> `sql.Int`\n* `Boolean` -> `sql.Bit`\n* `Date` -> `sql.DateTime`\n\nDefault data type for unknown object is `sql.VarChar`.\n\nYou can define you own type map.\n\n```javascript\nsql.map.register(MyClass, sql.Text);\n```\n\nYou can also overwrite default type map.\n\n```javascript\nsql.map.register(Number, sql.BigInt);\n```\n\n---------------------------------------\n\n<a name=\"output\" />\n### output(name, type)\n\nAdd an output parameter to the request.\n\n__Arguments__\n\n* **name** - Name of the output parameter without @ char.\n* **type** - SQL data type of output parameter.\n\n__Example__\n\n```javascript\nrequest.output('output_parameter', sql.Int);\n```\n\n---------------------------------------\n\n<a name=\"query\" />\n### query(command, [callback])\n\nExecute the SQL command.\n\n__Arguments__\n\n* **command** - T-SQL command to be executed.\n* **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred.\n\n__Example__\n\n```javascript\nvar request = new sql.Request();\nrequest.query('select 1 as number', function(err, recordset) {\n\tconsole.log(recordset[0].number); // return 1\n\t\n\t// ...\n});\n```\n\nYou can enable multiple recordsets in querries by `request.multiple = true` command.\n\n```javascript\nvar request = new sql.Request();\nrequest.multiple = true;\n\nrequest.query('select 1 as number; select 2 as number', function(err, recordsets) {\n\tconsole.log(recordsets[0][0].number); // return 1\n\tconsole.log(recordsets[1][0].number); // return 2\n\t\n\t// ...\n});\n```\n\n<a name=\"data-types\" />\n## Metadata\n\nRecordset metadata are accessible trough `recordset.columns` property.\n\n```javascript\nvar request = new sql.Request();\nrequest.query('select 1 as first, \\'asdf\\' as second', function(err, recordset) {\n\tconsole.dir(recordset.columns);\n\t\n\tconsole.log(recordset.columns.first.type === sql.Int); // true\n\tconsole.log(recordset.columns.second.type === sql.VarChar); // true\n});\n```\n\nColumns structure for example above:\n\n```\n{ first: { name: 'first', size: 10, type: { name: 'int' } },\n  second: { name: 'second', size: 4, type: { name: 'varchar' } } }\n```\n\n<a name=\"data-types\" />\n## Data Types\n\n```\nsql.BigInt\nsql.Decimal\nsql.Float\nsql.Int\nsql.Money\nsql.Numeric\nsql.SmallInt\nsql.SmallMoney\nsql.Real\nsql.TinyInt\n\nsql.Char\nsql.NChar\nsql.Text\nsql.NText\nsql.VarChar\nsql.NVarChar\nsql.Xml\n\nsql.Date\nsql.DateTime\nsql.DateTimeOffset\nsql.SmallDateTime\n\nsql.Bit\nsql.UniqueIdentifier\n```\n\nBinary types as input parameters are only available with Microsoft's native driver.\n\n```\nsql.VarBinary\nsql.NVarBinary\nsql.Image\n```\n\n<a name=\"verbose\" />\n## Verbose Mode\n\nYou can enable verbose mode by `request.verbose = true` command.\n\n```javascript\nvar request = new sql.Request();\nrequest.verbose = true;\nrequest.input('username', 'patriksimek');\nrequest.input('password', 'dontuseplaintextpassword');\nrequest.input('attempts', 2);\nrequest.execute('my_stored_procedure');\n```\n\nOutput for example above could look similar to this.\n\n```\n---------- sql execute --------\n     proc: my_stored_procedure\n    input: @username, varchar, patriksimek\n    input: @password, varchar, dontuseplaintextpassword\n    input: @attempts, bigint, 2\n---------- response -----------\n{ id: 1,\n  username: 'patriksimek',\n  password: 'dontuseplaintextpassword',\n  email: null,\n  language: 'en',\n  attempts: 2 }\n---------- --------------------\n   return: 0\n duration: 5ms\n---------- completed ----------\n```\n\n## TODO\n\n* UniqueIdentifier testing.\n* Binary, VarBinary, Image testing.\n\n<a name=\"license\" />\n## License\n\nCopyright (c) 2013 Patrik Simek\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/patriksimek/node-mssql/issues"
  },
  "_id": "mssql@0.3.1",
  "_from": "mssql@"
}
