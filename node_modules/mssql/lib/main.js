// Generated by CoffeeScript 1.6.2
(function() {
  var Driver, Request, TYPES, connected, connecting, events, getTypeByValue, key, map, util, value;

  events = require('events');

  util = require('util');

  TYPES = require('./datatypes').TYPES;

  Driver = null;

  connecting = false;

  connected = false;

  map = [];

  map.register = function(jstype, sqltype) {
    var index, item, _i, _len;

    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      item = this[index];
      if (!(item.js === jstype)) {
        continue;
      }
      this.splice(index, 1);
      break;
    }
    return this.push({
      js: jstype,
      sql: sqltype
    });
  };

  map.register(String, TYPES.VarChar);

  map.register(Number, TYPES.Int);

  map.register(Boolean, TYPES.Bit);

  map.register(Date, TYPES.DateTime);

  getTypeByValue = function(value) {
    var item, _i, _j, _k, _l, _len, _len1, _len2, _len3;

    if (value === null || value === void 0) {
      return TYPES.VarChar;
    }
    switch (typeof value) {
      case 'string':
        for (_i = 0, _len = map.length; _i < _len; _i++) {
          item = map[_i];
          if (item.js === String) {
            return item.sql;
          }
        }
        return TYPES.VarChar;
      case 'number':
        for (_j = 0, _len1 = map.length; _j < _len1; _j++) {
          item = map[_j];
          if (item.js === Number) {
            return item.sql;
          }
        }
        return TYPES.Int;
      case 'boolean':
        for (_k = 0, _len2 = map.length; _k < _len2; _k++) {
          item = map[_k];
          if (item.js === Boolean) {
            return item.sql;
          }
        }
        return TYPES.Bit;
      case 'object':
        for (_l = 0, _len3 = map.length; _l < _len3; _l++) {
          item = map[_l];
          if (value instanceof item.js) {
            return item.sql;
          }
        }
        return TYPES.VarChar;
      default:
        return TYPES.VarChar;
    }
  };

  Request = (function() {
    Request.prototype.parameters = null;

    Request.prototype.verbose = false;

    Request.prototype.multiple = false;

    function Request() {
      this.parameters = {};
    }

    Request.prototype.input = function(name, type, value) {
      /*
      		Append new input parameter to current request.
      		
      		Usage:
      		request.append name, value
      		request.append name, type, value
      */
      if (arguments.length === 1) {
        throw new Error("Invalid number of arguments. At least 2 arguments expected.");
      } else if (arguments.length === 2) {
        value = type;
        type = getTypeByValue(value);
      }
      if ((value != null ? value.valueOf : void 0) && !(value instanceof Date)) {
        value = value.valueOf();
      }
      if (value === void 0) {
        value = null;
      }
      if (value !== value) {
        value = null;
      }
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 1,
        value: value
      };
    };

    Request.prototype.output = function(name, type) {
      /*
      		Append new output parameter to current request.
      		
      		Usage:
      		request.append name, type
      */
      if (!type) {
        type = tds.TYPES.VarChar;
      }
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 2
      };
    };

    Request.prototype.query = function(command, callback) {
      /*
      		Execute specified sql command.
      */
      return Driver.prototype.query.call(this, command, callback);
    };

    Request.prototype.execute = function(procedure, callback) {
      /*
      		Execute stored procedure with specified parameters.
      */
      return Driver.prototype.execute.call(this, procedure, callback);
    };

    return Request;

  })();

  module.exports.connect = function(config, callback) {
    var err, _ref, _ref1;

    if (connected) {
      err = new Error("Database is already connected! Call close before connecting to different database.");
      if (callback) {
        callback(err);
      } else {
        throw err;
      }
    }
    if (connecting) {
      err = new Error("Already connecting to database! Call close before connecting to different database.");
      if (callback) {
        callback(err);
      } else {
        throw err;
      }
    }
    connecting = true;
    if ((_ref = config.driver) == null) {
      config.driver = 'tedious';
    }
    if ((_ref1 = config.port) == null) {
      config.port = 1433;
    }
    if (config.driver === 'tedious') {
      Driver = require('./tedious')(Request);
    } else if (config.driver === 'msnodesql') {
      Driver = require('./msnodesql')(Request);
    } else {
      err = new Error("Unknown driver " + config.driver + "!");
      if (callback) {
        callback(err);
      } else {
        throw err;
      }
    }
    return Driver.connect(config, function(err) {
      if (!connecting) {
        return;
      }
      connecting = false;
      if (!err) {
        connected = true;
      }
      return typeof callback === "function" ? callback(err) : void 0;
    });
  };

  module.exports.close = function() {
    if (connecting) {
      connecting = false;
      Driver.close();
      return Driver = null;
    } else if (connected) {
      connected = false;
      Driver.close();
      return Driver = null;
    }
  };

  module.exports.Request = Request;

  module.exports.TYPES = TYPES;

  module.exports.map = map;

  for (key in TYPES) {
    value = TYPES[key];
    module.exports[key] = value;
    module.exports[key.toUpperCase()] = value;
  }

  module.exports.pool = {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  };

  module.exports.connection = {
    userName: '',
    password: '',
    server: ''
  };

  module.exports.init = function() {
    return module.exports.connect({
      user: module.exports.connection.userName,
      password: module.exports.connection.password,
      server: module.exports.connection.server,
      options: module.exports.connection.options,
      driver: 'tedious',
      pool: module.exports.pool
    });
  };

}).call(this);
